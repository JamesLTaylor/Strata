/*
 * Copyright (C) 2021 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product.option;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableValidator;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.collect.array.DoubleArray;

/**
 * Continuous barrier with level switching at given date.
 * <p>
 * The barrier level is equal to the n-th level for dates after or on the (n-1)-th date
 * and strictly before the n-th date. For the first level, the start date should be considered as 
 * the start of time and for the last level, the end date is the end of time.
 * <p>
 * Window barriers, which act only on a given window of date, can be represented using levels 
 * equal to Double.MIN_NORMAL or Double.MAX_VALUE
 */
@BeanDefinition(factoryName = "of")
public final class PiecewiseConstantContinuousBarrier
    implements Barrier, ImmutableBean, Serializable {

  /**
   * The barrier type.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final BarrierType barrierType;
  /**
   * The knock type.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final KnockType knockType;
  /**
   * The barrier levels.
   */
  @PropertyDefinition
  private final DoubleArray barrierLevels;
  /**
   * Dates on which the barriers change level.
   */
  @PropertyDefinition
  private final List<LocalDate> switchDates;

  @Override
  public double getBarrierLevel(LocalDate date) {
    int nbSwitches = switchDates.size();
    for (int i = 0; i < nbSwitches; i++) {
      if (date.isBefore(switchDates.get(i))) {
        return barrierLevels.get(i);
      }
    }
    return barrierLevels.get(nbSwitches);
  }

  @Override
  public PiecewiseConstantContinuousBarrier inverseKnockType() {
    KnockType inverse = knockType.equals(KnockType.KNOCK_IN) ? KnockType.KNOCK_OUT : KnockType.KNOCK_IN;
    return of(barrierType, inverse, barrierLevels, switchDates);
  }
  
  @ImmutableValidator
  private void validate() {
    int nbSwitches = switchDates.size();
    ArgChecker.isTrue(barrierLevels.size() == nbSwitches + 1,
        "number of barrier levels should be the number of switch dates plus one");
    for (int i = 0; i < nbSwitches - 1; i++) {
      ArgChecker.isTrue(switchDates.get(i).isBefore(switchDates.get(i + 1)),
          "switch dates should be in increasing order");
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code PiecewiseConstantContinuousBarrier}.
   * @return the meta-bean, not null
   */
  public static PiecewiseConstantContinuousBarrier.Meta meta() {
    return PiecewiseConstantContinuousBarrier.Meta.INSTANCE;
  }

  static {
    MetaBean.register(PiecewiseConstantContinuousBarrier.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Obtains an instance.
   * @param barrierType  the value of the property, not null
   * @param knockType  the value of the property, not null
   * @param barrierLevels  the value of the property
   * @param switchDates  the value of the property
   * @return the instance
   */
  public static PiecewiseConstantContinuousBarrier of(
      BarrierType barrierType,
      KnockType knockType,
      DoubleArray barrierLevels,
      List<LocalDate> switchDates) {
    return new PiecewiseConstantContinuousBarrier(
      barrierType,
      knockType,
      barrierLevels,
      switchDates);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static PiecewiseConstantContinuousBarrier.Builder builder() {
    return new PiecewiseConstantContinuousBarrier.Builder();
  }

  private PiecewiseConstantContinuousBarrier(
      BarrierType barrierType,
      KnockType knockType,
      DoubleArray barrierLevels,
      List<LocalDate> switchDates) {
    JodaBeanUtils.notNull(barrierType, "barrierType");
    JodaBeanUtils.notNull(knockType, "knockType");
    this.barrierType = barrierType;
    this.knockType = knockType;
    this.barrierLevels = barrierLevels;
    this.switchDates = (switchDates != null ? ImmutableList.copyOf(switchDates) : null);
    validate();
  }

  @Override
  public PiecewiseConstantContinuousBarrier.Meta metaBean() {
    return PiecewiseConstantContinuousBarrier.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the barrier type.
   * @return the value of the property, not null
   */
  @Override
  public BarrierType getBarrierType() {
    return barrierType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the knock type.
   * @return the value of the property, not null
   */
  @Override
  public KnockType getKnockType() {
    return knockType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the barrier levels.
   * @return the value of the property
   */
  public DoubleArray getBarrierLevels() {
    return barrierLevels;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets dates on which the barriers change level.
   * @return the value of the property
   */
  public List<LocalDate> getSwitchDates() {
    return switchDates;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      PiecewiseConstantContinuousBarrier other = (PiecewiseConstantContinuousBarrier) obj;
      return JodaBeanUtils.equal(barrierType, other.barrierType) &&
          JodaBeanUtils.equal(knockType, other.knockType) &&
          JodaBeanUtils.equal(barrierLevels, other.barrierLevels) &&
          JodaBeanUtils.equal(switchDates, other.switchDates);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(barrierType);
    hash = hash * 31 + JodaBeanUtils.hashCode(knockType);
    hash = hash * 31 + JodaBeanUtils.hashCode(barrierLevels);
    hash = hash * 31 + JodaBeanUtils.hashCode(switchDates);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("PiecewiseConstantContinuousBarrier{");
    buf.append("barrierType").append('=').append(JodaBeanUtils.toString(barrierType)).append(',').append(' ');
    buf.append("knockType").append('=').append(JodaBeanUtils.toString(knockType)).append(',').append(' ');
    buf.append("barrierLevels").append('=').append(JodaBeanUtils.toString(barrierLevels)).append(',').append(' ');
    buf.append("switchDates").append('=').append(JodaBeanUtils.toString(switchDates));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PiecewiseConstantContinuousBarrier}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code barrierType} property.
     */
    private final MetaProperty<BarrierType> barrierType = DirectMetaProperty.ofImmutable(
        this, "barrierType", PiecewiseConstantContinuousBarrier.class, BarrierType.class);
    /**
     * The meta-property for the {@code knockType} property.
     */
    private final MetaProperty<KnockType> knockType = DirectMetaProperty.ofImmutable(
        this, "knockType", PiecewiseConstantContinuousBarrier.class, KnockType.class);
    /**
     * The meta-property for the {@code barrierLevels} property.
     */
    private final MetaProperty<DoubleArray> barrierLevels = DirectMetaProperty.ofImmutable(
        this, "barrierLevels", PiecewiseConstantContinuousBarrier.class, DoubleArray.class);
    /**
     * The meta-property for the {@code switchDates} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<LocalDate>> switchDates = DirectMetaProperty.ofImmutable(
        this, "switchDates", PiecewiseConstantContinuousBarrier.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "barrierType",
        "knockType",
        "barrierLevels",
        "switchDates");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1029043089:  // barrierType
          return barrierType;
        case 975895086:  // knockType
          return knockType;
        case 820609030:  // barrierLevels
          return barrierLevels;
        case 2103885745:  // switchDates
          return switchDates;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public PiecewiseConstantContinuousBarrier.Builder builder() {
      return new PiecewiseConstantContinuousBarrier.Builder();
    }

    @Override
    public Class<? extends PiecewiseConstantContinuousBarrier> beanType() {
      return PiecewiseConstantContinuousBarrier.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code barrierType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<BarrierType> barrierType() {
      return barrierType;
    }

    /**
     * The meta-property for the {@code knockType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<KnockType> knockType() {
      return knockType;
    }

    /**
     * The meta-property for the {@code barrierLevels} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DoubleArray> barrierLevels() {
      return barrierLevels;
    }

    /**
     * The meta-property for the {@code switchDates} property.
     * @return the meta-property, not null
     */
    public MetaProperty<List<LocalDate>> switchDates() {
      return switchDates;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1029043089:  // barrierType
          return ((PiecewiseConstantContinuousBarrier) bean).getBarrierType();
        case 975895086:  // knockType
          return ((PiecewiseConstantContinuousBarrier) bean).getKnockType();
        case 820609030:  // barrierLevels
          return ((PiecewiseConstantContinuousBarrier) bean).getBarrierLevels();
        case 2103885745:  // switchDates
          return ((PiecewiseConstantContinuousBarrier) bean).getSwitchDates();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code PiecewiseConstantContinuousBarrier}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<PiecewiseConstantContinuousBarrier> {

    private BarrierType barrierType;
    private KnockType knockType;
    private DoubleArray barrierLevels;
    private List<LocalDate> switchDates;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(PiecewiseConstantContinuousBarrier beanToCopy) {
      this.barrierType = beanToCopy.getBarrierType();
      this.knockType = beanToCopy.getKnockType();
      this.barrierLevels = beanToCopy.getBarrierLevels();
      this.switchDates = (beanToCopy.getSwitchDates() != null ? ImmutableList.copyOf(beanToCopy.getSwitchDates()) : null);
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1029043089:  // barrierType
          return barrierType;
        case 975895086:  // knockType
          return knockType;
        case 820609030:  // barrierLevels
          return barrierLevels;
        case 2103885745:  // switchDates
          return switchDates;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1029043089:  // barrierType
          this.barrierType = (BarrierType) newValue;
          break;
        case 975895086:  // knockType
          this.knockType = (KnockType) newValue;
          break;
        case 820609030:  // barrierLevels
          this.barrierLevels = (DoubleArray) newValue;
          break;
        case 2103885745:  // switchDates
          this.switchDates = (List<LocalDate>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public PiecewiseConstantContinuousBarrier build() {
      return new PiecewiseConstantContinuousBarrier(
          barrierType,
          knockType,
          barrierLevels,
          switchDates);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the barrier type.
     * @param barrierType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder barrierType(BarrierType barrierType) {
      JodaBeanUtils.notNull(barrierType, "barrierType");
      this.barrierType = barrierType;
      return this;
    }

    /**
     * Sets the knock type.
     * @param knockType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder knockType(KnockType knockType) {
      JodaBeanUtils.notNull(knockType, "knockType");
      this.knockType = knockType;
      return this;
    }

    /**
     * Sets the barrier levels.
     * @param barrierLevels  the new value
     * @return this, for chaining, not null
     */
    public Builder barrierLevels(DoubleArray barrierLevels) {
      this.barrierLevels = barrierLevels;
      return this;
    }

    /**
     * Sets dates on which the barriers change level.
     * @param switchDates  the new value
     * @return this, for chaining, not null
     */
    public Builder switchDates(List<LocalDate> switchDates) {
      this.switchDates = switchDates;
      return this;
    }

    /**
     * Sets the {@code switchDates} property in the builder
     * from an array of objects.
     * @param switchDates  the new value
     * @return this, for chaining, not null
     */
    public Builder switchDates(LocalDate... switchDates) {
      return switchDates(ImmutableList.copyOf(switchDates));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("PiecewiseConstantContinuousBarrier.Builder{");
      buf.append("barrierType").append('=').append(JodaBeanUtils.toString(barrierType)).append(',').append(' ');
      buf.append("knockType").append('=').append(JodaBeanUtils.toString(knockType)).append(',').append(' ');
      buf.append("barrierLevels").append('=').append(JodaBeanUtils.toString(barrierLevels)).append(',').append(' ');
      buf.append("switchDates").append('=').append(JodaBeanUtils.toString(switchDates));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
